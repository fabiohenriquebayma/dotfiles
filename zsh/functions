#!/usr/bin/env bash

################################################################################
# System specific functions
################################################################################
case "$(uname)" in
  Linux)
    ############################################################################
    # Open the current directory, otherwise open the given location
    ############################################################################
    function open() {
      if [ $# -eq 0 ]; then
        xdg-open . > /dev/null 2>&1;
      else
        xdg-open "$@" > /dev/null 2>&1;
      fi;
    }

  ;;
  Darwin)

  ;;
esac

################################################################################
# Update and upgrade everything
################################################################################
function f5() {
  CURRENT_DIR=$(pwd)

  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  ##############################################################################
  # Update and upgrade system packages
  ##############################################################################
  if [[ "$(uname)" == "Linux" ]]; then
    sudo apt update -y
    sudo apt dist-upgrade -y
    sudo apt autoremove -y
    sudo apt clean all -y
  elif [[ "$(uname)" == "Darwin" ]]; then
    brew update
    brew upgrade
    brew cu --all --yes --cleanup
    brew cleanup -s
    mas upgrade
    sudo softwareupdate -i -a
  fi

  ##############################################################################
  # Dotfiles
  ##############################################################################
  cd ~/.dotfiles || exit 1
  git pull-sub
  git submodule update --recursive --remote

  ##############################################################################
  # Python
  ##############################################################################
  pip3 list --outdated --format=freeze | \
    grep -v '^\-e' | \
    cut -d = -f 1 | \
    xargs -n1 pip3 install -U --user

  ##############################################################################
  # Ruby
  ##############################################################################
  sudo gem update --system

  ##############################################################################
  # Node.js
  ##############################################################################
  yarn global upgrade

  ##############################################################################
  # Vim
  ##############################################################################
  vim +PlugUpgrade +PlugUpdate +qall
  rm ~/.vim/autoload/plug.vim.old > /dev/null 2>&1

  ##############################################################################
  # Tmux
  ##############################################################################
  cd ~/.tmux/plugins/tmux-pain-control && git checkout master && git pull
  cd ~/.tmux/plugins/tmux-sensible && git checkout master && git pull
  cd ~/.tmux/plugins/tmux-themepack && git checkout master && git pull
  cd ~/.tmux/plugins/tmux-yank && git checkout master && git pull

  ##############################################################################
  # Oh-my-zsh
  ##############################################################################
  cd ~/.oh-my-zsh || exit 1
  git checkout master
  git pull

  ##############################################################################
  # Reload shell
  ##############################################################################
  source ~/.zshrc

  cd $CURRENT_DIR
}

################################################################################
# Create SSH keys
################################################################################
function genSSHKey() {
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified.";
    return 1;
  fi

  ssh-keygen -t rsa -b 4096 -C "$1"
}

################################################################################
# Start an HTTP server from a directory, optionally specifying the port
################################################################################
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &

  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

################################################################################
# MongoDB
################################################################################
function mongodb-start() {
  mkdir -p ~/Docker/Personal/Databases/MongoDB/Data
  mkdir -p ~/Docker/Personal/Databases/MongoDB/Dump

  docker run \
    --detach \
    --name personal_mongodb \
    --restart unless-stopped \
    --env "MONGO_INITDB_ROOT_USERNAME=root" \
    --env "MONGO_INITDB_ROOT_PASSWORD=root" \
    -v "$HOME/Docker/Personal/Databases/MongoDB/Data:/data/db" \
    -v "$HOME/Docker/Personal/Databases/MongoDB/Dump:/dump" \
    --publish 27017:27017 \
    mongo:4
}

function mongodb-stop() {
  docker stop personal_mongodb
}

function mongodb-purge() {
  mongodb-stop
  docker rm personal_mongodb

  sudo rm -rf ~/Docker/Personal/Databases/MongoDB/Data
}

function mongodb-terminal() {
  docker exec -it personal_mongodb /bin/bash
}

################################################################################
# MySQL
################################################################################
function mysql-start() {
  mkdir -p ~/Docker/Personal/Databases/MySQL/Data
  mkdir -p ~/Docker/Personal/Databases/MySQL/Dump

  docker run \
    --detach \
    --name personal_mysql \
    --restart unless-stopped \
    --env "MYSQL_ROOT_PASSWORD=root" \
    -v "$HOME/Docker/Personal/Databases/MySQL/Data:/var/lib/mysql" \
    -v "$HOME/Docker/Personal/Databases/MySQL/Dump:/dump" \
    --publish 3306:3306 \
    mysql:5
}

function mysql-stop() {
  docker stop personal_mysql
}

function mysql-purge() {
  mysql-stop
  docker rm personal_mysql

  sudo rm -rf ~/Docker/Personal/Databases/MySQL/Data
}

function mysql-terminal() {
  docker exec -it personal_mysql /bin/bash
}

################################################################################
# PostgreSQL
################################################################################
function postgresql-start() {
  mkdir -p ~/Docker/Personal/Databases/PostgreSQL/Data
  mkdir -p ~/Docker/Personal/Databases/PostgreSQL/Dump

  docker run \
    --detach \
    --name personal_postgresql \
    --restart unless-stopped \
    --env "POSTGRES_USER=root" \
    --env "POSTGRES_PASSWORD=root" \
    -v "$HOME/Docker/Personal/Databases/PostgreSQL/Data:/var/lib/postgresql/data" \
    -v "$HOME/Docker/Personal/Databases/PostgreSQL/Dump:/dump" \
    --publish 5432:5432 \
    postgres:11
}

function postgresql-stop() {
  docker stop personal_postgresql
}

function postgresql-purge() {
  postgresql-stop
  docker rm personal_postgresql

  sudo rm -rf ~/Docker/Personal/Databases/PostgreSQL/Data
}

function postgresql-terminal() {
  docker exec -it personal_postgresql /bin/bash
}

################################################################################
# Upload file to transfer.sh and copy url to clipboard
################################################################################
function transfer() {
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified.";
    return 1;
  fi

  tmpfile=$( mktemp -t transferXXX );

  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" | awk '{$1=$1};1' >> "$tmpfile";
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" | awk '{$1=$1};1' >> "$tmpfile";
  fi;

  cat "$tmpfile";
  case "$(uname)" in
    Linux)
      xsel -b < "$tmpfile"
      ;;
    Darwin)
      pbcopy < "$tmpfile"
      ;;
  esac
  rm -f "$tmpfile"
}
