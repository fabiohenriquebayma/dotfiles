#!/usr/bin/env bash

################################################################################
# Open the current directory, otherwise open the given location
################################################################################
function open() {
  if [ $# -eq 0 ]; then
    xdg-open . > /dev/null 2>&1;
  else
    xdg-open "$@" > /dev/null 2>&1;
  fi;
}

################################################################################
# Update and upgrade everything
################################################################################
function f5() {
  CURRENT_DIR=$(pwd)

  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  # Update and upgrade system packages
  sudo apt update -y
  sudo apt dist-upgrade -y
  sudo apt autoremove -y
  sudo apt clean all -y

  # Dotfiles
  cd ~/.dotfiles || exit 1
  git pull-sub
  git submodule update --recursive --remote

  # Python
  pip3 list --outdated --format=freeze | \
    grep -v "^\-e" | \
    cut -d = -f 1 | \
    xargs -n1 pip3 install -U --user

  # Ruby
  sudo gem update --system

  # Node.js
  yarn global upgrade

  # Vim
  vim +PlugUpdate +qall

  # Oh-my-zsh
  cd ~/.oh-my-zsh || exit 1
  git checkout master
  git pull

  # Reload shell
  source ~/.zshrc

  cd $CURRENT_DIR
}

################################################################################
# MongoDB
################################################################################
function mongodb-start() {
  mkdir -p ~/Docker/Databases/MongoDB/Data
  mkdir -p ~/Docker/Databases/MongoDB/Dump

  docker run \
    --detach \
    --name mongodb \
    --restart unless-stopped \
    --env "MONGO_INITDB_ROOT_USERNAME=root" \
    --env "MONGO_INITDB_ROOT_PASSWORD=root" \
    -v "$HOME/Docker/Databases/MongoDB/Data:/data/db" \
    -v "$HOME/Docker/Databases/MongoDB/Dump:/dump" \
    --publish 27017:27017 \
    mongo:4
}

function mongodb-stop() {
  docker stop mongodb
}

function mongodb-purge() {
  mongodb-stop
  docker rm mongodb

  sudo rm -rf ~/Docker/Databases/MongoDB/Data
}

function mongodb-terminal() {
  docker exec -it mongodb /bin/bash
}

################################################################################
# MySQL
################################################################################
function mysql-start() {
  mkdir -p ~/Docker/Databases/MySQL/Data
  mkdir -p ~/Docker/Databases/MySQL/Dump

  docker run \
    --detach \
    --name mysql \
    --restart unless-stopped \
    --env "MYSQL_ROOT_PASSWORD=root" \
    -v "$HOME/Docker/Databases/MySQL/Data:/var/lib/mysql" \
    -v "$HOME/Docker/Databases/MySQL/Dump:/dump" \
    --publish 3306:3306 \
    mysql:5
}

function mysql-stop() {
  docker stop mysql
}

function mysql-purge() {
  mysql-stop
  docker rm mysql

  sudo rm -rf ~/Docker/Databases/MySQL/Data
}

function mysql-terminal() {
  docker exec -it mysql /bin/bash
}

################################################################################
# PostgreSQL
################################################################################
function postgresql-start() {
  mkdir -p ~/Docker/Databases/PostgreSQL/Data
  mkdir -p ~/Docker/Databases/PostgreSQL/Dump

  docker run \
    --detach \
    --name postgresql \
    --restart unless-stopped \
    --env "POSTGRES_USER=root" \
    --env "POSTGRES_PASSWORD=root" \
    -v "$HOME/Docker/Databases/PostgreSQL/Data:/var/lib/postgresql/data" \
    -v "$HOME/Docker/Databases/PostgreSQL/Dump:/dump" \
    --publish 5432:5432 \
    postgres:11
}

function postgresql-stop() {
  docker stop postgresql
}

function postgresql-purge() {
  postgresql-stop
  docker rm postgresql

  sudo rm -rf ~/Docker/Databases/PostgreSQL/Data
}

function postgresql-terminal() {
  docker exec -it postgresql /bin/bash
}

################################################################################
# Upload hex files to Arduboy
################################################################################
function arduboy-upload() {
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified";
    return 1;
  fi

  if ! [ -x "$(command -v avrdude)" ]; then
    echo -e "You must install avrdude first"
  fi

  if ! [ -f /etc/udev/rules.d/99-arduboy.rules ]; then
    echo -e "Adding Arduboy rules to /etc/udev/rules.d/99-arduboy.rules"

    echo -e "ACTION==\"add\", ATTRS{idVendor}==\"2341\", ATTRS{idProduct}==\"0036\", SYMLINK+=\"arduboy-boot\", MODE=\"0666\"" | sudo tee /etc/udev/rules.d/99-arduboy.rules
    echo -e "ACTION==\"add\", ATTRS{idVendor}==\"2341\", ATTRS{idProduct}==\"8036\", SYMLINK+=\"arduboy\", MODE=\"0666\"" | sudo tee -a /etc/udev/rules.d/99-arduboy.rules
  fi

  if [ "$(id -Gn "$USER" | grep -c "dialout")" -eq 0 ]; then
    echo -e "Adding ${USER} to dialout group"

    sudo usermod -a -G dialout "$USER"
  fi

  echo -e "Searching for Arduboy..."

  while [ ! -e /dev/arduboy-boot ]; do
    if [ -e /dev/arduboy ]; then
      echo -e "Arduboy found. Trying to reset."

      stty -F /dev/arduboy ispeed 1200 ospeed 1200

      while [ -e /dev/arduboy ]; do
        sleep 0.1
      done;
    fi

    sleep 0.1
  done

  avrdude -v -patmega32u4 -cavr109 -P/dev/arduboy-boot -b57600 -D -Uflash:w:"$1":i
}
